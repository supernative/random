
<1722111262.4059527>
writing from my theyprone ~
<1722111286.4517193>
<1722126220.5364113>
gradient descent algorithm ~
a network makes guess using a parameter family ~
that family transforms some indata  to produce some outdata ~
outdata is observed ~
and compared against the associated expected data ~
for all such associations, the network is said to have some opinion which we assume to be stable under our closed mode of interaction ~
we could define a measure over outdata, function(indata) pairs ~
we could build a statistical record for every i ~
* instate, measure pairs ~
if the instate corresponds to some indata being fed, and the outdata corresponds to some associated outstate being preserved, then we could constraint the possible statistical variances using the principle defining a closed plane of interaction ~
while the plane remains closed, outstate says something about instate ~
while instate is reactive to the indata such a way that measure is reactive to the outdata, it says something about what possible other outdata could be produced ~
by tuning the instate such that preferred outdata could be achieved with minimum maintainence (closure), we tune the outstate as well ~
if the outstate must correspond linearly to the instate, it says something about possible preparations ~
there is a mode of description for a system constituting the measurer and generator ~
via that description, we say that the system changes from S' to S'' ~
we could also say that x changes because of S[x] but S[y] doesn't chang ~
if we could say that S[y] couldn't change while S[x] could, then we conjecture that y could not have changed either ~
if S could change at all and suc*a description is possible, then we could achive all the balances under*that mode of operation  ~
(more on that later) ~
<1722126937.952474>
<1722169423.7028122>
replace ONE NOTE & there WILL BE DIMINISHMENT ~
sphere maps one to one fashion all activities inside a terminal session ~
terminal maps every commands to *radial distance vector ~
it maps every relative positions in the path to horizontal displacement on xy plane ~
it maps every change in memory/state to the theta ~
it maps every steps since change in state to projection of * onto xy plane ~
it maps every change of directory to z component ~
 ~
sphere maps user at the root (origin) ~
every change in the path from initial path will map vector from root to current position on sphere surface ~
every level down from root path will map some quantity along z-dimension being changed for every step along x axis ~
every step along x-direction is a change of position or path ~
if any process is started (called)), the program executable gets star value which computes the theta with respect to xyz being static from the last state of the user ~
then from the star position, the user moves toward the horizontal projection of the program (star) which connects a straight path from origin (current position) to some point on the plane. ~
what is phi for terminal session? ~
phi is what angle that would enable a straight path from the origin to the projected point whose perpendicular line at that position touches the star at theta degree away from the standard z axis. ~
<1722170113.6068869>
<1722170798.037623>
correspondence yable: ~
(1) ls : theta : tree view of local scope : future light cone ~
* note: theta should have been phi but i will continue for now ~
(2) cmd : phi : executable code in memory : boolean observable state ~
(3) free -h : rho : memory view in resource : random access memory ~
(4) set : psi : terminal session state : environment configuration filse ~
<1722171354.2838798>